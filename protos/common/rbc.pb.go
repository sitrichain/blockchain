// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/rbc.proto

package common

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RListHeight struct {
	Ids        []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	NextHeight uint64   `protobuf:"varint,2,opt,name=nextHeight,proto3" json:"nextHeight,omitempty"`
}

func (m *RListHeight) Reset()         { *m = RListHeight{} }
func (m *RListHeight) String() string { return proto.CompactTextString(m) }
func (*RListHeight) ProtoMessage()    {}
func (*RListHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{0}
}
func (m *RListHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RListHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RListHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RListHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RListHeight.Merge(m, src)
}
func (m *RListHeight) XXX_Size() int {
	return m.Size()
}
func (m *RListHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_RListHeight.DiscardUnknown(m)
}

var xxx_messageInfo_RListHeight proto.InternalMessageInfo

func (m *RListHeight) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RListHeight) GetNextHeight() uint64 {
	if m != nil {
		return m.NextHeight
	}
	return 0
}

type RBCMessage struct {
	Type    int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ChainID string `protobuf:"bytes,3,opt,name=chainID,proto3" json:"chainID,omitempty"`
	TxID    string `protobuf:"bytes,4,opt,name=txID,proto3" json:"txID,omitempty"`
	Extend  string `protobuf:"bytes,5,opt,name=extend,proto3" json:"extend,omitempty"`
	Creator []byte `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Sign    []byte `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *RBCMessage) Reset()         { *m = RBCMessage{} }
func (m *RBCMessage) String() string { return proto.CompactTextString(m) }
func (*RBCMessage) ProtoMessage()    {}
func (*RBCMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{1}
}
func (m *RBCMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBCMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBCMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBCMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBCMessage.Merge(m, src)
}
func (m *RBCMessage) XXX_Size() int {
	return m.Size()
}
func (m *RBCMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RBCMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RBCMessage proto.InternalMessageInfo

func (m *RBCMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RBCMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RBCMessage) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *RBCMessage) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *RBCMessage) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

func (m *RBCMessage) GetCreator() []byte {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *RBCMessage) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RBCHttpRequest struct {
	Type     string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Method   string            `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Endpoint string            `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Body     []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Headers  map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Params   map[string]string `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extend   string            `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *RBCHttpRequest) Reset()         { *m = RBCHttpRequest{} }
func (m *RBCHttpRequest) String() string { return proto.CompactTextString(m) }
func (*RBCHttpRequest) ProtoMessage()    {}
func (*RBCHttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{2}
}
func (m *RBCHttpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBCHttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBCHttpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBCHttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBCHttpRequest.Merge(m, src)
}
func (m *RBCHttpRequest) XXX_Size() int {
	return m.Size()
}
func (m *RBCHttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RBCHttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RBCHttpRequest proto.InternalMessageInfo

func (m *RBCHttpRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RBCHttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RBCHttpRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *RBCHttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *RBCHttpRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RBCHttpRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RBCHttpRequest) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

//seek peer info to orderer
type PeerInfo struct {
	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	BlockInfo      *BlockchainInfo  `protobuf:"bytes,3,opt,name=blockInfo,proto3" json:"blockInfo,omitempty"`
	Cpu            int32            `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem            int32            `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk           int32            `protobuf:"varint,6,opt,name=disk,proto3" json:"disk,omitempty"`
	SeekTime       *types.Timestamp `protobuf:"bytes,7,opt,name=seekTime,proto3" json:"seekTime,omitempty"`
	Status         int32            `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	PeerImageId    string           `protobuf:"bytes,9,opt,name=peerImageId,proto3" json:"peerImageId,omitempty"`
	JavaenvImageId string           `protobuf:"bytes,10,opt,name=javaenvImageId,proto3" json:"javaenvImageId,omitempty"`
	EndorserTime   *types.Timestamp `protobuf:"bytes,11,opt,name=endorserTime,proto3" json:"endorserTime,omitempty"`
	Channels       string           `protobuf:"bytes,12,opt,name=channels,proto3" json:"channels,omitempty"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{3}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PeerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerInfo) GetBlockInfo() *BlockchainInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *PeerInfo) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *PeerInfo) GetMem() int32 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *PeerInfo) GetDisk() int32 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *PeerInfo) GetSeekTime() *types.Timestamp {
	if m != nil {
		return m.SeekTime
	}
	return nil
}

func (m *PeerInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PeerInfo) GetPeerImageId() string {
	if m != nil {
		return m.PeerImageId
	}
	return ""
}

func (m *PeerInfo) GetJavaenvImageId() string {
	if m != nil {
		return m.JavaenvImageId
	}
	return ""
}

func (m *PeerInfo) GetEndorserTime() *types.Timestamp {
	if m != nil {
		return m.EndorserTime
	}
	return nil
}

func (m *PeerInfo) GetChannels() string {
	if m != nil {
		return m.Channels
	}
	return ""
}

type PeerList struct {
	List []*PeerInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *PeerList) Reset()         { *m = PeerList{} }
func (m *PeerList) String() string { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()    {}
func (*PeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{4}
}
func (m *PeerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerList.Merge(m, src)
}
func (m *PeerList) XXX_Size() int {
	return m.Size()
}
func (m *PeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerList.DiscardUnknown(m)
}

var xxx_messageInfo_PeerList proto.InternalMessageInfo

func (m *PeerList) GetList() []*PeerInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type BlockStatistics struct {
	Number    uint64                   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	BlockTime *types.Timestamp         `protobuf:"bytes,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
	List      []*TransactionStatistics `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *BlockStatistics) Reset()         { *m = BlockStatistics{} }
func (m *BlockStatistics) String() string { return proto.CompactTextString(m) }
func (*BlockStatistics) ProtoMessage()    {}
func (*BlockStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{5}
}
func (m *BlockStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockStatistics.Merge(m, src)
}
func (m *BlockStatistics) XXX_Size() int {
	return m.Size()
}
func (m *BlockStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_BlockStatistics proto.InternalMessageInfo

func (m *BlockStatistics) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockStatistics) GetBlockTime() *types.Timestamp {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

func (m *BlockStatistics) GetList() []*TransactionStatistics {
	if m != nil {
		return m.List
	}
	return nil
}

type TransactionStatistics struct {
	ChaincodeId    string `protobuf:"bytes,1,opt,name=chaincodeId,proto3" json:"chaincodeId,omitempty"`
	Func           string `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
	ValidationCode string `protobuf:"bytes,3,opt,name=validationCode,proto3" json:"validationCode,omitempty"`
	PreTxId        string `protobuf:"bytes,4,opt,name=preTxId,proto3" json:"preTxId,omitempty"`
	TxSum          int32  `protobuf:"varint,5,opt,name=txSum,proto3" json:"txSum,omitempty"`
}

func (m *TransactionStatistics) Reset()         { *m = TransactionStatistics{} }
func (m *TransactionStatistics) String() string { return proto.CompactTextString(m) }
func (*TransactionStatistics) ProtoMessage()    {}
func (*TransactionStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{6}
}
func (m *TransactionStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionStatistics.Merge(m, src)
}
func (m *TransactionStatistics) XXX_Size() int {
	return m.Size()
}
func (m *TransactionStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionStatistics proto.InternalMessageInfo

func (m *TransactionStatistics) GetChaincodeId() string {
	if m != nil {
		return m.ChaincodeId
	}
	return ""
}

func (m *TransactionStatistics) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *TransactionStatistics) GetValidationCode() string {
	if m != nil {
		return m.ValidationCode
	}
	return ""
}

func (m *TransactionStatistics) GetPreTxId() string {
	if m != nil {
		return m.PreTxId
	}
	return ""
}

func (m *TransactionStatistics) GetTxSum() int32 {
	if m != nil {
		return m.TxSum
	}
	return 0
}

//列表数据
type ListData struct {
	List [][]byte `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *ListData) Reset()         { *m = ListData{} }
func (m *ListData) String() string { return proto.CompactTextString(m) }
func (*ListData) ProtoMessage()    {}
func (*ListData) Descriptor() ([]byte, []int) {
	return fileDescriptor_31ecff5bd2010206, []int{7}
}
func (m *ListData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListData.Merge(m, src)
}
func (m *ListData) XXX_Size() int {
	return m.Size()
}
func (m *ListData) XXX_DiscardUnknown() {
	xxx_messageInfo_ListData.DiscardUnknown(m)
}

var xxx_messageInfo_ListData proto.InternalMessageInfo

func (m *ListData) GetList() [][]byte {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*RListHeight)(nil), "common.RListHeight")
	proto.RegisterType((*RBCMessage)(nil), "common.RBCMessage")
	proto.RegisterType((*RBCHttpRequest)(nil), "common.RBCHttpRequest")
	proto.RegisterMapType((map[string]string)(nil), "common.RBCHttpRequest.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "common.RBCHttpRequest.ParamsEntry")
	proto.RegisterType((*PeerInfo)(nil), "common.PeerInfo")
	proto.RegisterType((*PeerList)(nil), "common.PeerList")
	proto.RegisterType((*BlockStatistics)(nil), "common.BlockStatistics")
	proto.RegisterType((*TransactionStatistics)(nil), "common.transactionStatistics")
	proto.RegisterType((*ListData)(nil), "common.ListData")
}

func init() { proto.RegisterFile("common/rbc.proto", fileDescriptor_31ecff5bd2010206) }

var fileDescriptor_31ecff5bd2010206 = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x51, 0x6b, 0x2b, 0x45,
	0x14, 0xee, 0x26, 0x4d, 0x9a, 0x4c, 0x42, 0x2d, 0xa3, 0x96, 0x25, 0x60, 0x0c, 0xf1, 0x22, 0x01,
	0x61, 0xa3, 0x55, 0xe4, 0x5a, 0x50, 0xa1, 0xad, 0xd0, 0x80, 0xc2, 0x65, 0x6e, 0x9f, 0x7c, 0x9b,
	0xec, 0x9c, 0x6e, 0xc6, 0x64, 0x67, 0xd6, 0x99, 0xd9, 0x92, 0xfa, 0x2b, 0x7c, 0x12, 0xff, 0x80,
	0xe0, 0x4f, 0xf1, 0xf1, 0x3e, 0xfa, 0x28, 0xed, 0x7f, 0xf0, 0x59, 0xe6, 0xcc, 0x6c, 0x9b, 0x5e,
	0x94, 0x8b, 0x6f, 0xe7, 0x3b, 0x73, 0xce, 0x99, 0x6f, 0xce, 0xf9, 0xce, 0x2e, 0x39, 0xca, 0x75,
	0x59, 0x6a, 0x35, 0x37, 0xcb, 0x3c, 0xab, 0x8c, 0x76, 0x9a, 0x76, 0x83, 0x67, 0xf4, 0x7e, 0xa1,
	0x75, 0xb1, 0x81, 0x39, 0x7a, 0x97, 0xf5, 0xf5, 0xdc, 0xc9, 0x12, 0xac, 0xe3, 0x65, 0x15, 0x02,
	0x47, 0x6f, 0xc7, 0xd4, 0x0d, 0x88, 0x02, 0x4c, 0x70, 0x4e, 0xbf, 0x26, 0x03, 0xf6, 0xad, 0xb4,
	0xee, 0x12, 0x64, 0xb1, 0x72, 0xf4, 0x88, 0xb4, 0xa5, 0xb0, 0x69, 0x32, 0x69, 0xcf, 0xfa, 0xcc,
	0x9b, 0x74, 0x4c, 0x88, 0x82, 0x6d, 0x3c, 0x4f, 0x5b, 0x93, 0x64, 0xb6, 0xcf, 0x76, 0x3c, 0xd3,
	0xdf, 0x13, 0x42, 0xd8, 0xd9, 0xf9, 0x77, 0x60, 0x2d, 0x2f, 0x80, 0x52, 0xb2, 0xef, 0x6e, 0x2b,
	0x48, 0x93, 0x49, 0x32, 0xeb, 0x30, 0xb4, 0xbd, 0x4f, 0x70, 0xc7, 0x31, 0x79, 0xc8, 0xd0, 0xa6,
	0x29, 0x39, 0xc8, 0x57, 0x5c, 0xaa, 0xc5, 0x45, 0xda, 0x9e, 0x24, 0xb3, 0x3e, 0x6b, 0x20, 0x56,
	0xd8, 0x2e, 0x2e, 0xd2, 0x7d, 0x74, 0xa3, 0x4d, 0x8f, 0x49, 0x17, 0xb6, 0x0e, 0x94, 0x48, 0x3b,
	0xe8, 0x8d, 0x08, 0xab, 0x18, 0xe0, 0x4e, 0x9b, 0xb4, 0x8b, 0xc5, 0x1b, 0xe8, 0xab, 0x58, 0x59,
	0xa8, 0xf4, 0x20, 0xdc, 0xe9, 0xed, 0xe9, 0xdf, 0x2d, 0x72, 0xc8, 0xce, 0xce, 0x2f, 0x9d, 0xab,
	0x18, 0xfc, 0x58, 0x83, 0x75, 0x4f, 0xe8, 0xf6, 0x23, 0xdd, 0x63, 0xd2, 0x2d, 0xc1, 0xad, 0xb4,
	0x40, 0xc2, 0x7d, 0x16, 0x11, 0x1d, 0x91, 0x1e, 0x28, 0x51, 0x69, 0xa9, 0x5c, 0xe4, 0xfc, 0x80,
	0x7d, 0x9d, 0xa5, 0x16, 0xb7, 0x48, 0x7a, 0xc8, 0xd0, 0xa6, 0x5f, 0x92, 0x83, 0x15, 0x70, 0x01,
	0xc6, 0xa6, 0x9d, 0x49, 0x7b, 0x36, 0x38, 0xf9, 0x20, 0x0b, 0x13, 0xc8, 0x9e, 0x92, 0xc8, 0x2e,
	0x43, 0xd4, 0x37, 0xca, 0x99, 0x5b, 0xd6, 0xe4, 0xd0, 0x53, 0xd2, 0xad, 0xb8, 0xe1, 0xa5, 0x4d,
	0xbb, 0x98, 0x3d, 0xfd, 0x8f, 0xec, 0x17, 0x18, 0x14, 0x92, 0x63, 0xc6, 0x4e, 0xbf, 0x0e, 0x76,
	0xfb, 0x35, 0x3a, 0x25, 0xc3, 0xdd, 0xcb, 0xfc, 0xb8, 0xd7, 0x70, 0x1b, 0x5f, 0xef, 0x4d, 0xfa,
	0x0e, 0xe9, 0xdc, 0xf0, 0x4d, 0x0d, 0xf1, 0xed, 0x01, 0x9c, 0xb6, 0x9e, 0x27, 0xa3, 0x2f, 0xc8,
	0x60, 0xe7, 0xaa, 0xff, 0x93, 0x3a, 0xfd, 0xb5, 0x4d, 0x7a, 0x2f, 0x00, 0xcc, 0x42, 0x5d, 0x6b,
	0x7a, 0x48, 0x5a, 0x52, 0xc4, 0xbc, 0x96, 0xc4, 0x19, 0x72, 0x21, 0x0c, 0x58, 0x1b, 0x13, 0x1b,
	0x48, 0x3f, 0x23, 0xfd, 0xe5, 0x46, 0xe7, 0x6b, 0x9f, 0x86, 0x1d, 0x1f, 0x9c, 0x1c, 0x37, 0x4d,
	0x38, 0xf3, 0x07, 0x41, 0x32, 0xea, 0x5a, 0xb3, 0xc7, 0x40, 0x4f, 0x2c, 0xaf, 0x6a, 0x9c, 0x44,
	0x87, 0x79, 0xd3, 0x7b, 0x4a, 0x28, 0x51, 0x3a, 0x1d, 0xe6, 0x4d, 0x54, 0xa4, 0xb4, 0x6b, 0x14,
	0x4d, 0x87, 0xa1, 0x4d, 0x3f, 0x27, 0x3d, 0x0b, 0xb0, 0xbe, 0x92, 0x25, 0x60, 0xd7, 0x06, 0x27,
	0xa3, 0x2c, 0xac, 0x54, 0xd6, 0xac, 0x54, 0x76, 0xd5, 0xac, 0x14, 0x7b, 0x88, 0xf5, 0xbd, 0xb6,
	0x8e, 0xbb, 0xda, 0xa6, 0x3d, 0xac, 0x16, 0x11, 0x9d, 0x90, 0x41, 0xe5, 0xdf, 0x5c, 0xf2, 0x02,
	0x16, 0x22, 0xed, 0xe3, 0xdb, 0x76, 0x5d, 0xf4, 0x43, 0x72, 0xf8, 0x03, 0xbf, 0xe1, 0xa0, 0x6e,
	0x9a, 0x20, 0x82, 0x41, 0xaf, 0x79, 0xe9, 0x57, 0x64, 0x08, 0x4a, 0x68, 0x63, 0xc1, 0x20, 0xbb,
	0xc1, 0x1b, 0xd9, 0x3d, 0x89, 0xf7, 0xc2, 0xcd, 0x57, 0x5c, 0x29, 0xd8, 0xd8, 0x74, 0x18, 0x84,
	0xdb, 0xe0, 0xe9, 0xc7, 0x61, 0x32, 0xfe, 0x13, 0x40, 0x9f, 0x91, 0xfd, 0x8d, 0xb4, 0x0e, 0xb7,
	0x7f, 0x70, 0x72, 0xd4, 0xb4, 0xba, 0x99, 0x1c, 0xc3, 0xd3, 0xe9, 0x2f, 0x09, 0x79, 0x0b, 0xbb,
	0xff, 0xd2, 0x71, 0x27, 0xad, 0x93, 0x39, 0xea, 0x4d, 0xd5, 0xe5, 0x12, 0x0c, 0xce, 0x75, 0x9f,
	0x45, 0x44, 0x9f, 0xc7, 0x09, 0x22, 0xed, 0xd6, 0x1b, 0x69, 0x3f, 0x06, 0xd3, 0x4f, 0x22, 0x97,
	0x36, 0x72, 0x79, 0xaf, 0xe1, 0xe2, 0x0c, 0x57, 0x96, 0xe7, 0x4e, 0x6a, 0xf5, 0x78, 0x7d, 0x24,
	0xf6, 0x5b, 0x42, 0xde, 0xfd, 0xd7, 0x73, 0x3f, 0x0a, 0x94, 0x4a, 0xae, 0x85, 0xef, 0x72, 0xd0,
	0xde, 0xae, 0xcb, 0x0b, 0xe2, 0xba, 0x56, 0x79, 0x54, 0x20, 0xda, 0x7e, 0x3c, 0x37, 0x7c, 0x23,
	0x05, 0xf7, 0xd5, 0xce, 0xb5, 0x80, 0xb8, 0xf5, 0xaf, 0x79, 0xbd, 0x80, 0x2b, 0x03, 0x57, 0xdb,
	0x85, 0x88, 0xdf, 0xac, 0x06, 0xfa, 0x8d, 0x70, 0xdb, 0x97, 0x75, 0x23, 0xbd, 0x00, 0xa6, 0x63,
	0xd2, 0xf3, 0xed, 0xbe, 0xf0, 0x9f, 0x41, 0xba, 0xd3, 0xf2, 0x61, 0x78, 0xc7, 0xd9, 0xfa, 0x8f,
	0xbb, 0x71, 0xf2, 0xea, 0x6e, 0x9c, 0xfc, 0x75, 0x37, 0x4e, 0x7e, 0xbe, 0x1f, 0xef, 0xbd, 0xba,
	0x1f, 0xef, 0xfd, 0x79, 0x3f, 0xde, 0x23, 0xcf, 0x72, 0x5d, 0x66, 0x46, 0xab, 0xe2, 0x27, 0x30,
	0xd9, 0xf2, 0x61, 0x03, 0x42, 0x2b, 0x6d, 0xec, 0xd1, 0xf7, 0x1f, 0x15, 0xd2, 0xad, 0xea, 0xa5,
	0x87, 0xf3, 0x18, 0x3c, 0x7f, 0x0c, 0x0e, 0xff, 0x07, 0x3b, 0x0f, 0xc1, 0xcb, 0x2e, 0xc2, 0x4f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xa2, 0x85, 0xf9, 0x58, 0x06, 0x00, 0x00,
}

func (m *RListHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RListHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RListHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextHeight != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.NextHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintRbc(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RBCMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBCMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Extend) > 0 {
		i -= len(m.Extend)
		copy(dAtA[i:], m.Extend)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Extend)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RBCHttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBCHttpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCHttpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extend) > 0 {
		i -= len(m.Extend)
		copy(dAtA[i:], m.Extend)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Extend)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRbc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRbc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRbc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRbc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRbc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRbc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		i -= len(m.Channels)
		copy(dAtA[i:], m.Channels)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Channels)))
		i--
		dAtA[i] = 0x62
	}
	if m.EndorserTime != nil {
		{
			size, err := m.EndorserTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.JavaenvImageId) > 0 {
		i -= len(m.JavaenvImageId)
		copy(dAtA[i:], m.JavaenvImageId)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.JavaenvImageId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PeerImageId) > 0 {
		i -= len(m.PeerImageId)
		copy(dAtA[i:], m.PeerImageId)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.PeerImageId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.SeekTime != nil {
		{
			size, err := m.SeekTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Disk != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Disk))
		i--
		dAtA[i] = 0x30
	}
	if m.Mem != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Mem))
		i--
		dAtA[i] = 0x28
	}
	if m.Cpu != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockInfo != nil {
		{
			size, err := m.BlockInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BlockTime != nil {
		{
			size, err := m.BlockTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Number != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxSum != 0 {
		i = encodeVarintRbc(dAtA, i, uint64(m.TxSum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PreTxId) > 0 {
		i -= len(m.PreTxId)
		copy(dAtA[i:], m.PreTxId)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.PreTxId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidationCode) > 0 {
		i -= len(m.ValidationCode)
		copy(dAtA[i:], m.ValidationCode)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.ValidationCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChaincodeId) > 0 {
		i -= len(m.ChaincodeId)
		copy(dAtA[i:], m.ChaincodeId)
		i = encodeVarintRbc(dAtA, i, uint64(len(m.ChaincodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintRbc(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRbc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRbc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RListHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovRbc(uint64(l))
		}
	}
	if m.NextHeight != 0 {
		n += 1 + sovRbc(uint64(m.NextHeight))
	}
	return n
}

func (m *RBCMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRbc(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	return n
}

func (m *RBCHttpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRbc(uint64(len(k))) + 1 + len(v) + sovRbc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRbc(uint64(mapEntrySize))
		}
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRbc(uint64(len(k))) + 1 + len(v) + sovRbc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRbc(uint64(mapEntrySize))
		}
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	if m.BlockInfo != nil {
		l = m.BlockInfo.Size()
		n += 1 + l + sovRbc(uint64(l))
	}
	if m.Cpu != 0 {
		n += 1 + sovRbc(uint64(m.Cpu))
	}
	if m.Mem != 0 {
		n += 1 + sovRbc(uint64(m.Mem))
	}
	if m.Disk != 0 {
		n += 1 + sovRbc(uint64(m.Disk))
	}
	if m.SeekTime != nil {
		l = m.SeekTime.Size()
		n += 1 + l + sovRbc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRbc(uint64(m.Status))
	}
	l = len(m.PeerImageId)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.JavaenvImageId)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	if m.EndorserTime != nil {
		l = m.EndorserTime.Size()
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Channels)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	return n
}

func (m *PeerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRbc(uint64(l))
		}
	}
	return n
}

func (m *BlockStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovRbc(uint64(m.Number))
	}
	if m.BlockTime != nil {
		l = m.BlockTime.Size()
		n += 1 + l + sovRbc(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRbc(uint64(l))
		}
	}
	return n
}

func (m *TransactionStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChaincodeId)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.ValidationCode)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	l = len(m.PreTxId)
	if l > 0 {
		n += 1 + l + sovRbc(uint64(l))
	}
	if m.TxSum != 0 {
		n += 1 + sovRbc(uint64(m.TxSum))
	}
	return n
}

func (m *ListData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, b := range m.List {
			l = len(b)
			n += 1 + l + sovRbc(uint64(l))
		}
	}
	return n
}

func sovRbc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRbc(x uint64) (n int) {
	return sovRbc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RListHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RListHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RListHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHeight", wireType)
			}
			m.NextHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBCMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBCMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBCMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBCHttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBCHttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBCHttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRbc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRbc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRbc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRbc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRbc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRbc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRbc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRbc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRbc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRbc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRbc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRbc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockInfo == nil {
				m.BlockInfo = &BlockchainInfo{}
			}
			if err := m.BlockInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			m.Mem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mem |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeekTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeekTime == nil {
				m.SeekTime = &types.Timestamp{}
			}
			if err := m.SeekTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavaenvImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JavaenvImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndorserTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndorserTime == nil {
				m.EndorserTime = &types.Timestamp{}
			}
			if err := m.EndorserTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PeerInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = &types.Timestamp{}
			}
			if err := m.BlockTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &TransactionStatistics{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transactionStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transactionStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChaincodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChaincodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSum", wireType)
			}
			m.TxSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRbc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, make([]byte, postIndex-iNdEx))
			copy(m.List[len(m.List)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRbc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRbc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRbc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRbc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRbc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRbc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbc   = fmt.Errorf("proto: integer overflow")
)
