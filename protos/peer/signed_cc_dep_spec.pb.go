// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peer/signed_cc_dep_spec.proto

package peer

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignedChaincodeDeploymentSpec carries the CDS along with endorsements
type SignedChaincodeDeploymentSpec struct {
	// This is the bytes of the ChaincodeDeploymentSpec
	ChaincodeDeploymentSpec []byte `protobuf:"bytes,1,opt,name=chaincode_deployment_spec,json=chaincodeDeploymentSpec,proto3" json:"chaincode_deployment_spec,omitempty"`
	// This is the instantiation policy which is identical in structure
	// to endorsement policy.  This policy is checked by the VSCC at commit
	// time on the instantiation (all peers will get the same policy as it
	// will be part of the LSCC instantation record and will be part of the
	// hash as well)
	InstantiationPolicy []byte `protobuf:"bytes,2,opt,name=instantiation_policy,json=instantiationPolicy,proto3" json:"instantiation_policy,omitempty"`
	// The endorsements of the above deployment spec, the owner's signature over
	// chaincode_deployment_spec and Endorsement.endorser.
	OwnerEndorsements []*Endorsement `protobuf:"bytes,3,rep,name=owner_endorsements,json=ownerEndorsements,proto3" json:"owner_endorsements,omitempty"`
}

func (m *SignedChaincodeDeploymentSpec) Reset()         { *m = SignedChaincodeDeploymentSpec{} }
func (m *SignedChaincodeDeploymentSpec) String() string { return proto.CompactTextString(m) }
func (*SignedChaincodeDeploymentSpec) ProtoMessage()    {}
func (*SignedChaincodeDeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e007a7c0644e7e6f, []int{0}
}
func (m *SignedChaincodeDeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedChaincodeDeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedChaincodeDeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedChaincodeDeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedChaincodeDeploymentSpec.Merge(m, src)
}
func (m *SignedChaincodeDeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *SignedChaincodeDeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedChaincodeDeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SignedChaincodeDeploymentSpec proto.InternalMessageInfo

func (m *SignedChaincodeDeploymentSpec) GetChaincodeDeploymentSpec() []byte {
	if m != nil {
		return m.ChaincodeDeploymentSpec
	}
	return nil
}

func (m *SignedChaincodeDeploymentSpec) GetInstantiationPolicy() []byte {
	if m != nil {
		return m.InstantiationPolicy
	}
	return nil
}

func (m *SignedChaincodeDeploymentSpec) GetOwnerEndorsements() []*Endorsement {
	if m != nil {
		return m.OwnerEndorsements
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedChaincodeDeploymentSpec)(nil), "protos.SignedChaincodeDeploymentSpec")
}

func init() { proto.RegisterFile("peer/signed_cc_dep_spec.proto", fileDescriptor_e007a7c0644e7e6f) }

var fileDescriptor_e007a7c0644e7e6f = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0xeb, 0xaf, 0xd2, 0x37, 0x18, 0x16, 0x52, 0x24, 0x02, 0xa2, 0x56, 0xd5, 0xa9, 0x2c,
	0x89, 0x80, 0x8d, 0xb1, 0xc0, 0x8e, 0xda, 0x8d, 0xc5, 0x4a, 0x9c, 0x53, 0x6a, 0x91, 0xf8, 0x2c,
	0x9f, 0x11, 0x2a, 0xbf, 0x82, 0x9f, 0xc5, 0x58, 0x31, 0x31, 0xa2, 0xe4, 0x8f, 0xa0, 0x38, 0xad,
	0x0a, 0x03, 0x93, 0x25, 0x3f, 0xcf, 0xbd, 0x77, 0x7a, 0xf9, 0xd8, 0x02, 0xb8, 0x94, 0x74, 0x69,
	0xa0, 0x90, 0x4a, 0xc9, 0x02, 0xac, 0x24, 0x0b, 0x2a, 0xb1, 0x0e, 0x3d, 0x46, 0xff, 0xc3, 0x43,
	0x67, 0xe7, 0x41, 0xb3, 0x0e, 0x2d, 0x52, 0x56, 0x49, 0x07, 0x64, 0xd1, 0x10, 0xf4, 0xd6, 0xf4,
	0x83, 0xf1, 0xf1, 0x32, 0x44, 0xdc, 0xae, 0x32, 0x6d, 0x14, 0x16, 0x70, 0x07, 0xb6, 0xc2, 0x75,
	0x0d, 0xc6, 0x2f, 0x2d, 0xa8, 0xe8, 0x86, 0x9f, 0xaa, 0x1d, 0xea, 0x76, 0x6c, 0x59, 0x58, 0x15,
	0xb3, 0x09, 0x9b, 0x1d, 0x2e, 0x4e, 0xd4, 0x1f, 0xb3, 0x97, 0xfc, 0x58, 0x1b, 0xf2, 0x99, 0xf1,
	0x3a, 0xf3, 0x1a, 0x8d, 0xb4, 0x58, 0x69, 0xb5, 0x8e, 0xff, 0x85, 0xb1, 0xd1, 0x2f, 0xf6, 0x10,
	0x50, 0x34, 0xe7, 0x11, 0xbe, 0x18, 0x70, 0x12, 0x4c, 0x81, 0x8e, 0xa0, 0xcb, 0xa2, 0x78, 0x38,
	0x19, 0xce, 0x0e, 0xae, 0x46, 0xfd, 0xd1, 0x94, 0xdc, 0xef, 0xd9, 0xe2, 0x28, 0xe8, 0x3f, 0x7e,
	0x68, 0x5e, 0xbe, 0x37, 0x82, 0x6d, 0x1a, 0xc1, 0xbe, 0x1a, 0xc1, 0xde, 0x5a, 0x31, 0xd8, 0xb4,
	0x62, 0xf0, 0xd9, 0x8a, 0x01, 0x9f, 0x2a, 0xac, 0x13, 0x87, 0xa6, 0x7c, 0x05, 0x97, 0xe4, 0x15,
	0xaa, 0xa7, 0x70, 0xfa, 0x2e, 0xb7, 0xab, 0xea, 0xf1, 0xa2, 0xd4, 0x7e, 0xf5, 0x9c, 0x27, 0x0a,
	0xeb, 0x74, 0xab, 0xa6, 0x7b, 0x35, 0xed, 0xd5, 0xb4, 0x53, 0xf3, 0xbe, 0xe3, 0xeb, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0x2c, 0x34, 0xb6, 0x8b, 0x01, 0x00, 0x00,
}

func (m *SignedChaincodeDeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedChaincodeDeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedChaincodeDeploymentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerEndorsements) > 0 {
		for iNdEx := len(m.OwnerEndorsements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwnerEndorsements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InstantiationPolicy) > 0 {
		i -= len(m.InstantiationPolicy)
		copy(dAtA[i:], m.InstantiationPolicy)
		i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(len(m.InstantiationPolicy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChaincodeDeploymentSpec) > 0 {
		i -= len(m.ChaincodeDeploymentSpec)
		copy(dAtA[i:], m.ChaincodeDeploymentSpec)
		i = encodeVarintSignedCcDepSpec(dAtA, i, uint64(len(m.ChaincodeDeploymentSpec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignedCcDepSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignedCcDepSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedChaincodeDeploymentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChaincodeDeploymentSpec)
	if l > 0 {
		n += 1 + l + sovSignedCcDepSpec(uint64(l))
	}
	l = len(m.InstantiationPolicy)
	if l > 0 {
		n += 1 + l + sovSignedCcDepSpec(uint64(l))
	}
	if len(m.OwnerEndorsements) > 0 {
		for _, e := range m.OwnerEndorsements {
			l = e.Size()
			n += 1 + l + sovSignedCcDepSpec(uint64(l))
		}
	}
	return n
}

func sovSignedCcDepSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignedCcDepSpec(x uint64) (n int) {
	return sovSignedCcDepSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedChaincodeDeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignedCcDepSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedChaincodeDeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedChaincodeDeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChaincodeDeploymentSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChaincodeDeploymentSpec = append(m.ChaincodeDeploymentSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.ChaincodeDeploymentSpec == nil {
				m.ChaincodeDeploymentSpec = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiationPolicy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstantiationPolicy = append(m.InstantiationPolicy[:0], dAtA[iNdEx:postIndex]...)
			if m.InstantiationPolicy == nil {
				m.InstantiationPolicy = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEndorsements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEndorsements = append(m.OwnerEndorsements, &Endorsement{})
			if err := m.OwnerEndorsements[len(m.OwnerEndorsements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignedCcDepSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignedCcDepSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignedCcDepSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignedCcDepSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedCcDepSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignedCcDepSpec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSignedCcDepSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSignedCcDepSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSignedCcDepSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSignedCcDepSpec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSignedCcDepSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignedCcDepSpec   = fmt.Errorf("proto: integer overflow")
)
